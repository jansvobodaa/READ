1. PROGRAMOVÁNÍ – DATOVÉ TYPY A POLE

-Proměnné jsou základním stavebním kamenem programování. Slouží k ukládání hodnot, se kterými se v programu pracuje. 
Vznikají definováním (datový typ + název). Datový typ určuje co v proměnné může být uloženo a jaké operace jsou s tou 
proměnnou povoleny. Datové typy jsou různé a jejich použité závisí na tom, co bude v proměnné uloženo.
___
-primitivní typy:
čísla (byte, short, int, long, float, double),
znaky (char),
logické hodnoty (boolean),

(-referenční typy:
třídy (class),
pole (array))
___
Logická hodnota (boolean) – může nabývat hodnot 0/1 nebo false/true.
Celé číslo (integer) – v C je standartně integer 16bitový a proto může nabývat od -216-1 až 216-1 (-65535 < i < 65535)
Znak (char) – ukládá jeden znak. V počítači je reprezentován pomocí celého čísla.
Reálné číslo (double, float, real) – ukládá čísla s desetinnými čísly.
V C se můžeme setkat s prázdným datovým typem void, pro který nenabývá žádných hodnot. 
Může sloužit pro deklaraci funkce, která nemá návratovou hodnotu.
___
-Definice - alokuje paměť pro proměnnou v paměti RAM
X Deklarace (udává typ a jméno) - Výčet všech proměnných, které se v programu objeví
___
typy deklarace:
-Statická - hned nahoře v ,,bloku” si definujeme VŠECHNY proměnné a zablokujeme místečko hned -(pomalé, ale bezpečné 
+ nemohu proměnnou deklarovat vícekrát)
-Dynamická - deklarujeme proměnnou tam, kde jsou potřeba v daném čase a místě
___
-Aritmetické operátory:
+ součet
− rozdíl
* násobení
/ dělení (celočíselné i desetinné)
% zbytek po celočíselném dělení 

-Složené aritmetické operátory:
x++ => x = x+1
x-- => x = x-1
___
-Relační operátory:
používají se pro porovnání hodnot dvou číselných proměnných (pokud nejsou stejného typu, tak se převedou na delší typ), 
proměnných typu char a boolean. Výsledkem je hodnota typu boolean, tj. buď pravda (true) nebo nepravda (false) - nejčastěji s -if-
== rovná se
!= nerovná se
< menší než
> větší než
<= menší nebo rovno
>= větší nebo rovno
___________
- Datová pole (array) = soubor hodnot, datová struktura, která sdružuje daný počet prvků stejného datového typu.
      - pole definujeme tak, že je to nějaké místo v paměti pro několik proměnných stejného typu uložených pod stejným identifikátorem
když potřebujeme neomezený počet proměnných a navíc uspořádaných - využijeme seznam
      - Na položku v seznamu se odkazujeme indexem
      - seznam začíná vždy od nuly! (proto když vypíšeme print ⦗1⦘, vypíše to druhou položku)
      
      - Pole deklarujeme skoro týmž způsobem jako proměnné  =>  datový typ + název + rozsah
       - Pole jsou dobré, protože v nich můžeme uložit více dat
__________
Příklady
1) Určete, jaká bude hodnota v proměnné -a- po skončení této sekvence příkazů:
int a,b,c; // definujeme proměnné typy integer
a=b=c=0; // přiřazení hodnoty 0 všem proměnným
if (++b) a+=b; // pokud se podaří navýšit hodnotu b, splní se inkrementování a o hodnotu b
c=b++; // do c se přiřadí hodnota 1 (hodnota b před inkrementací) a v proměnné b bude následně hodnota 2
a*=c; // násobíme a=a*c = a = 1*1

2) Vytvořte v editoru DEV-C++ program, který bude obsahovat sekvenci příkazů z předchozího bodu a provede 
výpis proměnných a, b, c na obrazovku:
printf(“%d %d %d”,a,b,c);

